{
  "schemes": [],
  "swagger": "2.0",
  "info": {
    "description": "REST API for KAuth service",
    "title": "KAuth",
    "contact": {},
    "license": {
      "name": "Proprietary License"
    },
    "version": "1.0.0"
  },
  "host": "kauth.konnect-dev.konghq.com",
  "basePath": "/api",
  "paths": {
    "/authenticate": {
      "post": {
        "description": "This will authenticate a user...",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "authentication"
        ],
        "summary": "Authenticates a user given a username and password",
        "parameters": [
          {
            "description": "Authentication request",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authenticate.authenticateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/authenticate.authenticateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/authenticate/{organizationId}": {
      "get": {
        "description": "If the organization has an IdP setup, they will be redirected through\nthat IdP, otherwise they will be redirected to the Konnect user login",
        "summary": "Redirects a user to the correct location for organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "organizationId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Path to return to after authentication has completed",
            "name": "returnTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Configuration test mode",
            "name": "test",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Found",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/client-config/": {
      "get": {
        "description": "this endpoint will check if the `require-registration-access-code`\nhas been set in the config",
        "produces": [
          "application/json"
        ],
        "tags": [
          "client config"
        ],
        "summary": "returns a json with wether the require-registration-access-code (bool) has been set",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/clientconfig.clientConfigResponse"
            }
          }
        }
      }
    },
    "/email-verifications": {
      "patch": {
        "description": "This endpoint verifies a user's email given an email verification token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "email verification"
        ],
        "summary": "Verifies a user's email address",
        "parameters": [
          {
            "description": "Verify email",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/emailverifications.verifyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/emailverifications.verifyResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "410": {
            "description": "Token expired",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/invites": {
      "patch": {
        "description": "This endpoint accepts an invitation and sets the user's initial password. It will also mark the user's email address as verified.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "invites"
        ],
        "summary": "Accepts an invitation",
        "parameters": [
          {
            "description": "Verify email",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/invites.acceptRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/invites.acceptResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "410": {
            "description": "Token expired",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/password-resets": {
      "post": {
        "description": "This endpoint creates a reset request entry and sends the user an email with a link to\nreset their password. It will return success if the email address is not found.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "passwords"
        ],
        "summary": "Creates a password reset request",
        "parameters": [
          {
            "description": "Request Reset Password",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/passwordresets.requestResetRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/passwordresets.requestResetResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "This endpoint updates a user's password given a reset token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "passwords"
        ],
        "summary": "Resets a user's password",
        "parameters": [
          {
            "description": "Reset Password",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/passwordresets.resetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/passwordresets.resetResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "410": {
            "description": "Token expired",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "description": "Refresh will set a new access and refresh token if the user is still valid.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "authentication"
        ],
        "summary": "Refreshes a user if a valid refresh token is provided",
        "parameters": [
          {
            "description": "refresh request",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/refresh.refreshRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/refresh.refreshResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Invalid Token",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "This endpoint will create a new organization and user. The user will not\nbe able to log in until they have verified their email address. The email address must be\nunique and not used for any other basic auth login.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "registration"
        ],
        "summary": "Registers a new organization",
        "parameters": [
          {
            "description": "Registration request",
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register.registerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/register.registerResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "authenticate.authenticateRequest": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "description": "Password is the password for the user",
          "type": "string",
          "example": "notagoodpassword"
        },
        "username": {
          "description": "Username is the name of the user to authenticate",
          "type": "string",
          "example": "user@example.com"
        }
      }
    },
    "authenticate.authenticateResponse": {
      "type": "object"
    },
    "clientconfig.clientConfigResponse": {
      "type": "object",
      "properties": {
        "require-registration-access-code": {
          "type": "boolean"
        }
      }
    },
    "emailverifications.verifyRequest": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "description": "Token is an email verification token",
          "type": "string",
          "example": "5ae75b14-991b-40c9-806a-83b159ee2abb"
        }
      }
    },
    "emailverifications.verifyResponse": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "john.doe@kong.com"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Code is an application-specific error code, expressed as a string value.",
          "type": "string",
          "example": "1"
        },
        "detail": {
          "description": "Detail is a human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.",
          "type": "string",
          "example": "organization not found with id 9"
        },
        "id": {
          "description": "ID is a unique identifier for this particular occurrence of the problem.",
          "type": "string",
          "example": "b53c52dd-9d33-4f1b-99bf-7deae3c60fe9"
        },
        "source": {
          "$ref": "#/definitions/errorSource"
        },
        "status": {
          "description": "Status is the HTTP status code applicable to this problem, expressed as a string value.",
          "type": "string",
          "example": "404"
        },
        "title": {
          "description": "Title is a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.",
          "type": "string",
          "example": "not found"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    "errorSource": {
      "type": "object",
      "properties": {
        "parameter": {
          "description": "Parameter is a string indicating which URI query parameter caused the error",
          "type": "string",
          "example": "id"
        },
        "pointer": {
          "description": "Pointer is a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute]",
          "type": "string",
          "example": "/id"
        }
      }
    },
    "invites.acceptRequest": {
      "type": "object",
      "required": [
        "password",
        "token"
      ],
      "properties": {
        "password": {
          "description": "Password is the user's new password",
          "type": "string",
          "example": "notagoodpassword"
        },
        "token": {
          "description": "Token is an invitation token",
          "type": "string",
          "example": "5ae75b14-991b-40c9-806a-83b159ee2abb"
        }
      }
    },
    "invites.acceptResponse": {
      "type": "object"
    },
    "passwordresets.requestResetRequest": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email is the email of the user requesting a password reset",
          "type": "string",
          "example": "user@example.com"
        }
      }
    },
    "passwordresets.requestResetResponse": {
      "type": "object"
    },
    "passwordresets.resetRequest": {
      "type": "object",
      "required": [
        "password",
        "token"
      ],
      "properties": {
        "password": {
          "description": "Password is the user's new password",
          "type": "string",
          "example": "notagoodpassword"
        },
        "token": {
          "description": "Token is a password reset token",
          "type": "string",
          "example": "5ae75b14-991b-40c9-806a-83b159ee2abb"
        }
      }
    },
    "passwordresets.resetResponse": {
      "type": "object"
    },
    "refresh.refreshRequest": {
      "type": "object"
    },
    "refresh.refreshResponse": {
      "type": "object"
    },
    "register.registerRequest": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "organization",
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email is the email of the new user",
          "type": "string",
          "example": "annie@ruokay.com"
        },
        "firstName": {
          "description": "FirstName is the first name of the new user",
          "type": "string",
          "example": "Annie"
        },
        "lastName": {
          "description": "LastName is the last name of the new user",
          "type": "string",
          "example": "Ruokay"
        },
        "organization": {
          "description": "Organization is the name of the new organization to create",
          "type": "string",
          "example": "Acme"
        },
        "password": {
          "description": "Password is the password of the new user",
          "type": "string",
          "example": "notagoodpassword"
        },
        "registration-code": {
          "description": "Registration Code is the code required to register a new user",
          "type": "string",
          "example": "12fjsd34"
        }
      }
    },
    "register.registerResponse": {
      "type": "object",
      "properties": {
        "organizationID": {
          "type": "string",
          "example": "187e2b65-ec69-421c-a7ba-3e946c4e5077"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Authentication endpoints",
      "name": "authentication"
    },
    {
      "description": "Registration endpoints",
      "name": "registration"
    },
    {
      "description": "Password reset endpoints",
      "name": "passwords"
    },
    {
      "description": "Email verification endpoints",
      "name": "email verification"
    },
    {
      "description": "Invitation management",
      "name": "invites"
    },
    {
      "description": "client configuration endpoints",
      "name": "client config"
    }
  ]
}
